// updatePasswords.js

const db = require('./config/db'); // Importa o pool J√Å COM PROMISES
const bcrypt = require('bcrypt');
const saltRounds = 10;

async function hashPasswords() {
  let connection;
  try {
    // Pega uma conex√£o do pool
    connection = await db.getConnection(); 
    console.log("Conex√£o com o banco de dados obtida para o script.");

    // Busca apenas senhas que n√£o come√ßam com o padr√£o do bcrypt ($2a$, $2b$, etc.)
    const [users] = await connection.query('SELECT id, password FROM usuarios WHERE password NOT LIKE "$2b$%"');

    if (users.length === 0) {
      console.log('‚úÖ Nenhuma senha em texto plano para atualizar. Tudo certo!');
      return;
    }

    console.log(`Encontradas ${users.length} senhas para criptografar...`);

    for (const user of users) {
      // Gera o hash da senha
      const hashedPassword = await bcrypt.hash(user.password, saltRounds);
      // Atualiza o banco de dados com a senha criptografada
      await connection.query('UPDATE usuarios SET password = ? WHERE id = ?', [hashedPassword, user.id]);
      console.log(`-> Senha do usu√°rio com ID ${user.id} foi atualizada com sucesso.`);
    }

    console.log('üéâ Atualiza√ß√£o de senhas conclu√≠da!');

  } catch (error) {
    console.error('‚ùå Erro ao atualizar senhas:', error.message);
  } finally {
    // Garante que a conex√£o seja liberada de volta para o pool
    if (connection) {
      console.log("Liberando a conex√£o com o banco de dados.");
      connection.release();
    }
    // Fecha o pool de conex√µes para que o script termine
    db.end();
  }
}

// Executa a fun√ß√£o
hashPasswords();